// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ChunkFlatBufferStructures
{

using global::System;
using global::FlatBuffers;

public struct ChunkBlockInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ChunkBlockInfo GetRootAsChunkBlockInfo(ByteBuffer _bb) { return GetRootAsChunkBlockInfo(_bb, new ChunkBlockInfo()); }
  public static ChunkBlockInfo GetRootAsChunkBlockInfo(ByteBuffer _bb, ChunkBlockInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ChunkBlockInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public sbyte BlockTypes { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)0; } }
  public sbyte BlockHealth { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)0; } }
  public sbyte BitPackStatus3Orientations5 { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)0; } }

  public static Offset<ChunkBlockInfo> CreateChunkBlockInfo(FlatBufferBuilder builder,
      sbyte BlockTypes = 0,
      sbyte BlockHealth = 0,
      sbyte BitPack_Status3_Orientations5 = 0) {
    builder.StartObject(3);
    ChunkBlockInfo.AddBitPackStatus3Orientations5(builder, BitPack_Status3_Orientations5);
    ChunkBlockInfo.AddBlockHealth(builder, BlockHealth);
    ChunkBlockInfo.AddBlockTypes(builder, BlockTypes);
    return ChunkBlockInfo.EndChunkBlockInfo(builder);
  }

  public static void StartChunkBlockInfo(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddBlockTypes(FlatBufferBuilder builder, sbyte BlockTypes) { builder.AddSbyte(0, BlockTypes, 0); }
  public static void AddBlockHealth(FlatBufferBuilder builder, sbyte BlockHealth) { builder.AddSbyte(1, BlockHealth, 0); }
  public static void AddBitPackStatus3Orientations5(FlatBufferBuilder builder, sbyte BitPackStatus3Orientations5) { builder.AddSbyte(2, BitPackStatus3Orientations5, 0); }
  public static Offset<ChunkBlockInfo> EndChunkBlockInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ChunkBlockInfo>(o);
  }
};

public struct ChunkInfoBuffer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ChunkInfoBuffer GetRootAsChunkInfoBuffer(ByteBuffer _bb) { return GetRootAsChunkInfoBuffer(_bb, new ChunkInfoBuffer()); }
  public static ChunkInfoBuffer GetRootAsChunkInfoBuffer(ByteBuffer _bb, ChunkInfoBuffer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ChunkInfoBuffer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ushort ChunkIndex(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUshort(__p.__vector(o) + j * 2) : (ushort)0; }
  public int ChunkIndexLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetChunkIndexBytes() { return __p.__vector_as_arraysegment(4); }
  public ChunkBlockInfo? Blocks(int j) { int o = __p.__offset(6); return o != 0 ? (ChunkBlockInfo?)(new ChunkBlockInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BlocksLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<ChunkInfoBuffer> CreateChunkInfoBuffer(FlatBufferBuilder builder,
      VectorOffset chunkIndexOffset = default(VectorOffset),
      VectorOffset BlocksOffset = default(VectorOffset)) {
    builder.StartObject(2);
    ChunkInfoBuffer.AddBlocks(builder, BlocksOffset);
    ChunkInfoBuffer.AddChunkIndex(builder, chunkIndexOffset);
    return ChunkInfoBuffer.EndChunkInfoBuffer(builder);
  }

  public static void StartChunkInfoBuffer(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddChunkIndex(FlatBufferBuilder builder, VectorOffset chunkIndexOffset) { builder.AddOffset(0, chunkIndexOffset.Value, 0); }
  public static VectorOffset CreateChunkIndexVector(FlatBufferBuilder builder, ushort[] data) { builder.StartVector(2, data.Length, 2); for (int i = data.Length - 1; i >= 0; i--) builder.AddUshort(data[i]); return builder.EndVector(); }
  public static void StartChunkIndexVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(2, numElems, 2); }
  public static void AddBlocks(FlatBufferBuilder builder, VectorOffset BlocksOffset) { builder.AddOffset(1, BlocksOffset.Value, 0); }
  public static VectorOffset CreateBlocksVector(FlatBufferBuilder builder, Offset<ChunkBlockInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartBlocksVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<ChunkInfoBuffer> EndChunkInfoBuffer(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ChunkInfoBuffer>(o);
  }
};

public struct ChunkBuffer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ChunkBuffer GetRootAsChunkBuffer(ByteBuffer _bb) { return GetRootAsChunkBuffer(_bb, new ChunkBuffer()); }
  public static ChunkBuffer GetRootAsChunkBuffer(ByteBuffer _bb, ChunkBuffer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ChunkBuffer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ChunkInfoBuffer? Chunks(int j) { int o = __p.__offset(4); return o != 0 ? (ChunkInfoBuffer?)(new ChunkInfoBuffer()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChunksLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<ChunkBuffer> CreateChunkBuffer(FlatBufferBuilder builder,
      VectorOffset chunksOffset = default(VectorOffset)) {
    builder.StartObject(1);
    ChunkBuffer.AddChunks(builder, chunksOffset);
    return ChunkBuffer.EndChunkBuffer(builder);
  }

  public static void StartChunkBuffer(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddChunks(FlatBufferBuilder builder, VectorOffset chunksOffset) { builder.AddOffset(0, chunksOffset.Value, 0); }
  public static VectorOffset CreateChunksVector(FlatBufferBuilder builder, Offset<ChunkInfoBuffer>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartChunksVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<ChunkBuffer> EndChunkBuffer(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ChunkBuffer>(o);
  }
  public static void FinishChunkBufferBuffer(FlatBufferBuilder builder, Offset<ChunkBuffer> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedChunkBufferBuffer(FlatBufferBuilder builder, Offset<ChunkBuffer> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
